- name: Check if /mnt/winiso is mounted
  command: mountpoint -q /mnt/winiso
  register: winiso_mount_check
  ignore_errors: yes
  changed_when: false

- name: Unmount /mnt/winiso if mounted
  command: umount /mnt/winiso
  when: winiso_mount_check.rc == 0
  become: yes
  ignore_errors: yes

- name: Remove existing /mnt/winiso directory
  file:
    path: /mnt/winiso
    state: absent
  become: yes
  ignore_errors: yes

- name: Create temp directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /mnt/winiso
    - /var/lib/vz/template/provision_winsrv/
    - /var/lib/vz/template/file_xml/
    - /var/lib/vz/template/provision_winsrv/temp
  become: yes
  ignore_errors: yes

- name: Copy autounattend.xml to provision directory on Proxmox
  copy:
    src: ./tasks/windows/autounattend.xml
    dest: "/var/lib/vz/template/file_xml/autounattend.xml"
    owner: root
    group: root

- name: Download QEMU Guest Agent MSI
  copy:
    src: ./tasks/windows/qemu-ga.msi
    dest: "/var/lib/vz/template/provision_winsrv/temp/qemu-ga.msi"
    owner: root
    group: root

- name: Install required packages for xml module
  apt:
    name: 
      - python3-lxml
      - python3-pip
      - genisoimage  # Ajouté ici pour éviter une tâche supplémentaire
    state: present
  become: yes

- name: Check if ISO is already mounted
  command: mount
  register: mount_output
  changed_when: false

- name: Unmount Windows Server ISO if already mounted
  command: umount /mnt/winiso
  when: "'/mnt/winiso' in mount_output.stdout"
  ignore_errors: yes

- name: Mount Windows Server ISO
  mount:
    src: "{{ iso_dir }}/{{ iso_file }}"
    path: /mnt/winiso
    fstype: iso9660
    opts: loop
    state: mounted
  become: yes

- name: Copy ISO contents to provision directory
  command: rsync -av /mnt/winiso/ /var/lib/vz/template/provision_winsrv/
  become: yes

- name: Unmount Windows Server ISO
  mount:
    path: /mnt/winiso
    state: unmounted
  become: yes

- name: Copy autounattend.xml to provision directory
  copy:
    src: /var/lib/vz/template/file_xml/autounattend.xml
    dest: /var/lib/vz/template/provision_winsrv/autounattend.xml
    remote_src: yes
  become: yes

- name: Create new ISO file
  command: >
    genisoimage -o /var/lib/vz/template/iso/Windows_Server_Auto.iso
    -b boot/etfsboot.com -no-emul-boot -boot-load-size 8 -iso-level 3
    -relaxed-filenames -allow-lowercase -allow-multidot -udf -J -joliet-long
    -eltorito-alt-boot -e boot/boot.sdi -no-emul-boot -V "WinSrv_Auto"
    -allow-limited-size /var/lib/vz/template/provision_winsrv/
  become: yes
  register: iso_created

- name: Create VM
  command: >
    qm create {{ item.vm_id }}
    --name {{ item.vm_name }}
    --sockets {{ vm_sockets }}
    --cores {{ vm_cores }}
    --memory {{ vm_memory }}
    --ide2 file=local:iso/Windows_Server_Auto.iso,media=cdrom
    --scsihw virtio-scsi-pci
    --sata0 {{ item.storage_name }}:{{ drive_size_gb }},format={{ format }}
    --ostype {{ vm_os_type }}
    --agent {{ agent }}
    --boot order=ide2
  with_items: "{{ vms }}"
  register: vm_creation

- name: Start VMs
  command: "qm start {{ item.vm_id }}"
  with_items: "{{ vms }}"
  when: item.vm_id in vm_creation.results | map(attribute='item.vm_id') | list

- name: Wait for Windows installation to complete
  command: >
    qm guest exec {{ item.vm_id }} -- powershell.exe -Command "Get-Content 'C:\Windows\Setup\State\State.ini'"
  register: installation_complete
  until: installation_complete.stdout is search('ImageState=IMAGE_STATE_COMPLETE')
  retries: 120
  delay: 10
  with_items: "{{ vms }}"

- name: Wait for QEMU Guest Agent to become accessible
  shell: "qm agent {{ item.vm_id }} ping"
  register: agent_result
  until: agent_result.rc == 0
  retries: 60
  delay: 10
  with_items: "{{ vms }}"

- name: Attempt to Shutdown VM using QEMU Guest Agent
  command: "qm shutdown {{ item.vm_id }}"
  when: item.vm_id in vm_creation.results | map(attribute='item.vm_id') | list
  register: shutdown_result
  ignore_errors: yes
  with_items: "{{ vms }}"

- name: Wait for VM to be in stopped state
  shell: "qm list | grep {{ item.vm_id }} | awk '{print $3}'"
  register: vm_status
  until: vm_status.stdout | trim == "stopped"
  retries: 30
  delay: 10
  with_items: "{{ vms }}"

- name: Create template from VM
  command: "qm template {{ item.vm_id }}"
  with_items: "{{ vms }}"

- name: Enable Firewall on Template
  command: "pvesh set /nodes/{{ node }}/qemu/{{ item.vm_id }}/firewall/options -enable true"
  with_items: "{{ vms }}"

- name: Done
  debug:
    msg: "Template build {{ item.vm_name }}, with VMID {{ item.vm_id }} complete."
  with_items: "{{ vms }}"