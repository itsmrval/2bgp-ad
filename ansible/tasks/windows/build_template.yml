- name: define_variables
  set_fact:
    vms:
      - { vm_id: "{{ template_id }}", vm_name: "build-{{ template_id }}", storage_name: "local" }
    iso_file: "winsrv2012.iso"
    storage_name: "local"
    iso_dir: "/var/lib/vz/template/iso"
    provision_iso_name: "winsrv2012-provision.iso"
    provision_dir: "/var/lib/vz/template/provision_winsrv"
    vm_memory: 8192
    vm_cores: 4
    vm_sockets: 1
    drive_size_gb: 14
    format: "qcow2"
    vm_os_type: "win8"
    agent: 1
    node: "{{ inventory_hostname }}"


- name: create_vm
  command: >
    qm create {{ item.vm_id }}
    --name {{ item.vm_name }}
    --sockets {{ vm_sockets }}
    --cores {{ vm_cores }}
    --memory {{ vm_memory }}
    --ide2 file=local:iso/Windows_Server_Auto.iso,media=cdrom
    --scsihw virtio-scsi-pci
    --sata0 {{ item.storage_name }}:{{ drive_size_gb }},format={{ format }}
    --ostype {{ vm_os_type }}
    --agent {{ agent }}
    --boot order=ide2
  with_items: "{{ vms }}"
  register: vm_creation

- name: start_vms
  command: "qm start {{ item.vm_id }}"
  with_items: "{{ vms }}"
  when: item.vm_id in vm_creation.results | map(attribute='item.vm_id') | list

- name: waiting_install
  command: >
    qm guest exec {{ item.vm_id }} -- powershell.exe -Command "Get-Content 'C:\Windows\Setup\State\State.ini'"
  register: installation_complete
  until: installation_complete.stdout is search('ImageState=IMAGE_STATE_COMPLETE')
  retries: 120
  delay: 10
  with_items: "{{ vms }}"

- name: waiting_agent
  shell: "qm agent {{ item.vm_id }} ping"
  register: agent_result
  until: agent_result.rc == 0
  retries: 60
  delay: 10
  with_items: "{{ vms }}"

- name: shutdown_vms
  command: "qm shutdown {{ item.vm_id }}"
  when: item.vm_id in vm_creation.results | map(attribute='item.vm_id') | list
  register: shutdown_result
  ignore_errors: yes
  with_items: "{{ vms }}"

- name: waiting_shutdown
  shell: "qm list | grep {{ item.vm_id }} | awk '{print $3}'"
  register: vm_status
  until: vm_status.stdout | trim == "stopped"
  retries: 30
  delay: 10
  with_items: "{{ vms }}"

- name: creating_template
  command: "qm template {{ item.vm_id }}"
  with_items: "{{ vms }}"

- name: enable_firewall
  command: "pvesh set /nodes/{{ node }}/qemu/{{ item.vm_id }}/firewall/options -enable true"
  with_items: "{{ vms }}"

- name: done
  debug:
    msg: "Template build {{ item.vm_name }}, with vmid {{ item.vm_id }} complete."
  with_items: "{{ vms }}"
