---
- name: init_playbook
  hosts: proxmox_node
  gather_facts: yes
  become: yes
  tasks:

  ### SETUP ANSIBLE ###

  # Permission ssh key for ansible
    - name: apply_chmod_ssh_key
      file:
        path: ./assets/ssh_key/id_rsa
        mode: '0600'
      delegate_to: localhost
      become: no
      run_once: true

  ### DEPLOY NET PROXMOX NODE ###
    
    # Deploy SDN on the Proxmox node
    - name: deploy_sdn
      import_tasks: tasks/proxmox/deploy_sdn.yml
      vars:
        sdn_name: "{{ sdn_corenet_name }}"
        sdn_network: "{{ sdn_corenet_network }}"
        sdn_gateway: "{{ sdn_corenet_gateway }}"

    # Deploy SDN client demo TORM
    - name: deploy_sdn_demo
      import_tasks: tasks/proxmox/deploy_sdn.yml
      vars:
        sdn_name: "cust100"
        sdn_network: "10.100.0.0/16"
        sdn_gateway: "10.100.0.254"
        sdn_cust: true
      
    # Apply iptables rules for WireGuard
    - name: setup_iptable
      import_tasks: tasks/proxmox/setup_forward.yml
      vars:
        dest_ip: "{{ container_vpn_ip }}"
        port: "511-1000"
        protocol: "udp"

    # Download the template 
    - name: download_template
      import_tasks: tasks/proxmox/download_template.yml

  ### DEPLOY CORE VPN CONTAINER ###
    
    # Deploy the VPN container
    - name: deploy_vpn_container
      import_tasks: tasks/proxmox/deploy_container.yml
      vars:
        container_id: "{{ container_vpn_id }}"
        container_name: "{{ container_vpn_name }}"
        container_memory: "{{ container_vpn_memory }}"
        container_cores: "{{ container_vpn_cores }}"
        container_ip: "{{ container_vpn_ip }}"
        container_size: 8
        enable_tun: true

    # Dynamically add the vpn container to inventory with SSH args
    - name: add_vpn_container_to_inventory
      add_host:
        name: "{{ container_vpn_ip }}"
        groups: vpn_containers
        ansible_ssh_common_args: "-o ProxyJump=root@192.168.48.184 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes"
        ansible_ssh_private_key_file: "./assets/ssh_key/id_rsa"
        ansible_user: root

    # Wait for the VPN container to be reachable via SSH
    - name: wait_for_ssh_vpn_container
      wait_for:
        host: "{{ container_vpn_ip }}"
        port: 22
        delay: 3
        timeout: 300
        state: started
      register: ssh_vpn_result
      until: ssh_vpn_result is succeeded

    # Install core software on the VPN container  
    - name: install_requirements
      import_tasks: tasks/core_software/apt_install.yml
      vars:
        apt_packages:
          - python3
          - ansible
          - pipx
          - wireguard
      delegate_to: "{{ container_vpn_ip }}"
      
    # Deploy the Deployment API on the VPN container
    - name: deploy_deployment_api
      import_tasks: tasks/core_software/deploy_deployment_api.yml
      delegate_to: "{{ container_vpn_ip }}" 

  ### DEPLOY CORE WEB CONTAINER ###
    
    # Deploy the Web container
    - name: deploy_web_container
      import_tasks: tasks/proxmox/deploy_container.yml
      vars:
        container_id: "{{ container_web_id }}"
        container_name: "{{ container_web_name }}"
        container_memory: "{{ container_web_memory }}"
        container_cores: "{{ container_web_cores }}"
        container_ip: "{{ container_web_ip }}"
        container_size: 8
        enable_tun: true

    # Dynamically add the web container to inventory with SSH args
    - name: add_web_container_to_inventory
      add_host:
        name: "{{ container_web_ip }}"
        groups: web_containers
        ansible_ssh_common_args: "-o ProxyJump=root@192.168.48.184 -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        ansible_ssh_private_key_file: "./assets/ssh_key/id_rsa"
        ansible_user: root

    # Wait for the Web container to be reachable via SSH
    - name: wait_for_ssh_web_container
      wait_for:
        host: "{{ container_web_ip }}"
        port: 22
        delay: 3
        timeout: 300
        state: started
      register: ssh_web_result
      until: ssh_web_result is succeeded

  ### PREPARING TEMPLATES ###
    - name: prepare_windows_template
      import_tasks: tasks/windows/prepare_template.yml

    - name: build_windows_template
      import_tasks: tasks/windows/build_template.yml